# Problem 1
def power(x, n):
    if n == 1:
        return x
    return x * power(x,n-1)

print("2^5 = " + str(power(2,5)))


# Problem 2
def interleave(L1, L2):
    if len(L1) == 1:
        return [L1[0], L2[0]]
    return [L1[0], L2[0]] + interleave(L1[1:],L2[1:])

L1=[1,2,3]
L2=["a","b","c"]
print(interleave(L1, L2))

#Problem 3
def reverse_loop(L):
    if len(L) == 1:
        return [L[0]]
    return reverse_loop(L[1:]) + [L[0]]

print(reverse_loop(L1))

# Problem 4
def zigzag1(L):
#no loop no print for whole list
    if len(L) == 0:
        return
    else:
        zigzag1(L[1:-1]) #middle part
        if len(L) == 1:
            print(L[0], end = " ")
        else:
            print(L[0], L[-1], end = " ")

L3 = [1,2,3,4,5]
zigzag1(L3)

# Problem 5
def is_balanced(s):
    if s.find("(") == -1 and s.find(")") == -1: #finds if first and last parnethesis match, balanced
        return True
    elif s.find("(") == -1 or s.find(")") == -1: #one parentehsis exists but one does not, not balanced
        return False
    # replace removes parenthesis
    opener = s.find("(") # marks the first opener in the list for later
    s = s.replace("(", "",1) # removes the first opener
    s = s[:opener] + s[opener:].replace(")", "", 1) # keep up until the opener and then after the opener each closed loop is removed 
    return is_balanced(s) #does recursion through string

string="((ahahahah)(ergh(test)oooh)" #should return True
print("")
print(is_balanced(string))
