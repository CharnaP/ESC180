
"""Gomoku starter code
You should complete every incomplete function,
and add more functions and variables as needed.

Note that incomplete functions have 'pass' as the first statement:
pass is a Python keyword; it is a statement that does nothing.
This is a placeholder that you should remove once you modify the function.

Author(s): Michael Guerzhoy with tests contributed by Siavash Kazemian.  Last modified: Oct. 26, 2020
"""
#X REFERS TO COLUMNS Y IS ROWS LIKE IN CHARTS
#Is empty passed!
def is_empty(board):
    #Iff no stones on board return true
    ''' Return True if board board is empty, False otherwise.
        Board is an nxn matrix stored as a list of lists.'''

    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j] != " ":
                return False
    return True

def is_bounded(board, y_end, x_end, length, d_y, d_x):
    #Analyse the length here
    #Checks border
    #Assume false unless made true
    open_left=False
    open_right=False
    open_top=False
    open_bottom=False
    open_top_left=False
    open_bottom_right=False
    open_bottom_left=False
    open_top_right=False

    #checking horizontal
    if d_y==0 and d_x==1:
        #Checks if space right of last piece, and left of first is empty
        if x_end-length>=0 and board[y_end][x_end-length]==" ":
            open_left=True
        if x_end+1<8 and board[y_end][x_end+1]==" ":
            open_right=True
        #returns concensus
        if open_right and open_left:
            return "OPEN"
        elif open_right or open_left:
            return "SEMIOPEN"
        else:
            return "CLOSED"
    #Checking top down
    elif d_y==1 and d_x==0:
        if y_end-length>=0 and board[y_end-length][x_end]==" ":
            open_top=True
        if y_end+1<8 and board[y_end+1][x_end]==" ":
            open_bottom=True
        #returns concensus
        if open_top and open_bottom:
            return "OPEN"
        elif open_top or open_bottom:
            return "SEMIOPEN"
        else:
            return "CLOSED"
    #Checking upper left to lower right
    elif d_y==1 and d_x==1:
        if y_end-length>=0 and x_end-length>=0 and board[y_end-length][x_end-length]==" ":
            open_top_left=True
        if y_end+1<8 and x_end+1<8 and board[y_end+1][x_end+1]==" ":
            open_bottom_right=True
        #returns concensus
        if open_top_left and open_bottom_right:
            return "OPEN"
        elif open_top_left or open_bottom_right:
            return "SEMIOPEN"
        else:
            return "CLOSED"
    #Checking upper right to lower left
    elif d_y==1 and d_x==-1:
        if y_end-length>=0 and x_end+1<8 and board[y_end-length][x_end+1]==" ":
            open_top_right=True
        if y_end+1<8 and x_end-1>=0 and board[y_end+1][x_end-1]==" ":
            open_bottom_left=True

        #returns concensus
        if open_top_right and open_bottom_left:
            return "OPEN"
        elif open_top_right or open_bottom_left:
            return "SEMIOPEN"
        else:
            return "CLOSED"

def detect_row(board, col, y_start, x_start, length, d_y, d_x):
    open_seq_count=0
    semi_open_seq_count=0
    List_row=[]

    #GETTING LENGTH ROW
    #horizontal add them
    if d_y==0 and d_x==1 or d_y==1 and d_x==0:
        row_length=len(board)

    #diagonal, note that the bottom row subtract y-1
    #top left to bot. right
    elif d_y==1 and d_x==1:
        row_length=min(len(board)-y_start, len(board)-x_start) #note always starting at top

    #top right to bottom left
    elif d_y==1 and d_x==-1:
        row_length=min(len(board)-y_start, x_start+1)
    #CREATES A LIST OF THAT ROW TO CHECK FOR STUFF
    for i in range(row_length):
        if y_start<8 and x_start<8:
            List_row.append(board[y_start][x_start])
            y_start+=1*d_y
            x_start+=1*d_x
    #makes borders to check corner cases
    List_with_Border=["I"]+List_row+["I"]
    sequence_count=0
    for i in range(len(List_with_Border)):
        if List_with_Border[i]==col:
            sequence_count+=1

        elif List_with_Border[i]!=col:
            if sequence_count==length:
                if List_with_Border[i]==" " and List_with_Border[i-length-1]==" ":
                    open_seq_count+=1
                elif List_with_Border[i]==" " or List_with_Border[i-length-1]==" ":
                    semi_open_seq_count+=1
            sequence_count=0

    return open_seq_count, semi_open_seq_count


def detect_rows(board, col, length):
    #set the total for zero
    open_seq_count, semi_open_seq_count, open_count_total, semi_count_total = 0, 0, 0, 0
    for i in range(len(board)):
        #Direction top down 1,0
        d_y,d_x=1,0
        open_seq_count, semi_open_seq_count = detect_row(board, col, 0, i, length, d_y, d_x)
        open_count_total += open_seq_count
        semi_count_total += semi_open_seq_count
        #Direction left to right 0,1
    for i in range(len(board)):
        d_y,d_x=0,1
        open_seq_count, semi_open_seq_count = detect_row(board, col, i, 0, length, d_y, d_x)
        open_count_total += open_seq_count
        semi_count_total += semi_open_seq_count

    #Direction top left to bottom right 1,1
    '''Note on ranges: board is 8 long i.e. len(board)-2 = 6
    Diagonals can be split looking at starting at the right column, left column, bottom or top (i.e. the 0 and i)
    The range needs to be limited to help with corners (i.e. not doubling or indexing issues)
    '''
    for i in range(6):
        d_y,d_x=1,1
        open_seq_count, semi_open_seq_count = detect_row(board, col, 0, i, length, d_y, d_x)
        open_count_total += open_seq_count
        semi_count_total += semi_open_seq_count

    for i in range(1, 6):
        d_y,d_x=1,1
        open_seq_count, semi_open_seq_count = detect_row(board, col, i, 0, length, d_y, d_x)
        open_count_total += open_seq_count
        semi_count_total += semi_open_seq_count

    #Direction top right to bottom left 1,-1
    for i in range(2, 8):
        d_y,d_x=1,-1
        open_seq_count, semi_open_seq_count = detect_row(board, col, 0, i, length, d_y, d_x)
        open_count_total += open_seq_count
        semi_count_total += semi_open_seq_count

    for i in range(1, 6):
        d_y,d_x=1,-1
        open_seq_count, semi_open_seq_count = detect_row(board, col, i, 7, length, d_y, d_x)
        open_count_total += open_seq_count
        semi_count_total += semi_open_seq_count
    return open_count_total, semi_count_total

def search_max(board):
    #computes a move for the computer that will grant maximum "score" based on the board state
    #Place in middle as that's the best spot in general
    score_y, score_x = 0, 0
    cur_score = -1000000000

    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == " ":
                board[i][j] = "b" #places b to test new place
                #if score(board)==max(cur_score, score(board)): NOTE THAT MAX IS>=
                if score(board) > cur_score:
                    cur_score = score(board)
                    score_y = i
                    score_x = j
                board[i][j] = " "
    return score_y, score_x


def score(board):
    #Gives score, assumes black just moved
    MAX_SCORE = 100000

    open_b = {}
    semi_open_b = {}
    open_w = {}
    semi_open_w = {}

    for i in range(2, 6):
        open_b[i], semi_open_b[i] = detect_rows(board, "b", i)
        open_w[i], semi_open_w[i] = detect_rows(board, "w", i)

    if open_b[5] >= 1 or semi_open_b[5] >= 1:
        return MAX_SCORE

    elif open_w[5] >= 1 or semi_open_w[5] >= 1:
        return -MAX_SCORE

    return (-10000 * (open_w[4] + semi_open_w[4]) +
            500 * open_b[4] +
            50 * semi_open_b[4] +
            -100 * open_w[3] +
            -30 * semi_open_w[3] +
            50 * open_b[3] +
            10 * semi_open_b[3] +
            open_b[2] + semi_open_b[2] - open_w[2] - semi_open_w[2])


def detect_closed_5_row(board, col, y_start, x_start, length, d_y, d_x):
    closed_5=0
    List_row=[]

    #GETTING LENGTH ROW
    #horizontal add them
    if d_y==0 and d_x==1 or d_y==1 and d_x==0:
        row_length=len(board)

    #diagonal, note that the bottom row subtract y-1
    #top left to bot. right
    elif d_y==1 and d_x==1:
        row_length=min(len(board)-y_start, len(board)-x_start) #note always starting at top

    #top right to bottom left
    elif d_y==1 and d_x==-1:
        row_length=min(len(board)-y_start, x_start+1)
    #CREATES A LIST OF THAT ROW TO CHECK FOR STUFF
    for i in range(row_length):
        if y_start<8 and x_start<8:
            List_row.append(board[y_start][x_start])
            y_start+=1*d_y
            x_start+=1*d_x
    #makes borders to check corner cases
    List_with_Border=["I"]+List_row+["I"]
    sequence_count=0
    for i in range(len(List_with_Border)):
        if List_with_Border[i]==col:
            sequence_count+=1

        elif List_with_Border[i]!=col:
            if sequence_count==length:
                if length==5 and List_with_Border[i]!=" " and List_with_Border[i-length-1]!=" ":
                    closed_5+=1
            sequence_count = 0
    return closed_5

def detect_closed_5_rows(board, col, length):
    #Sometimes the last piece can end multiple closed rows of 5, this fucntion checks that
    count_5 = 0
    total_closed_5 = 0
    for i in range(8):
        count_5 = detect_closed_5_row(board, col, 0, i, length, 1, 0)
        total_closed_5 += count_5
    for i in range(8):
        count_5 = detect_closed_5_row(board, col, i, 0, length, 0, 1)
        total_closed_5 += count_5
    #Diagonal top r to bottom l
    for i in range(6):
        count_5 = detect_closed_5_row(board, col, 0, i, length, 1, 1)
        total_closed_5 += count_5

    for i in range(1, 6):
        count_5 = detect_closed_5_row(board, col, i, 0, length, 1, 1)
        total_closed_5 += count_5

    #top l to bottom r

    for i in range(2, 8):

        count_5= detect_closed_5_row(board, col, 0, i, length, 1, -1)
        total_closed_5 += count_5

    for i in range(1, 6):

        count_5= detect_closed_5_row(board, col, i, len(board) - 1, length, 1, -1)
        total_closed_5 += count_5
    return total_closed_5

def is_win(board):
    '''Returns what outcome for game is'''
    #check if 5 in a row
    full_flag = True
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == " ":
                full_flag = False

    if detect_rows(board,"b",5)!=(0,0) or detect_closed_5_rows(board,"b",5):
        return "Black won"
    elif detect_rows(board,"w",5)!=(0,0) or detect_closed_5_rows(board,"w",5):
        return "White won"
    elif full_flag:
        return "Draw"
    else:
        return "Continue playing"
def print_board(board):
    #Prints board, don't change
    s = "*"
    for i in range(len(board[0]) - 1):
        s += str(i % 10) + "|"
    s += str((len(board[0]) - 1) % 10)
    s += "*\n"

    for i in range(len(board)):
        s += str(i % 10)
        for j in range(len(board[0]) - 1):
            s += str(board[i][j]) + "|"
        s += str(board[i][len(board[0]) - 1])

        s += "*\n"
    s += (len(board[0]) * 2 + 1) * "*"

    print(s)


def make_empty_board(sz):
    board = []
    for i in range(sz):
        board.append([" "] * sz)
    return board


def analysis(board):
    #analysis position of the board by computing number of open and semi open
    for c, full_name in [["b", "Black"], ["w", "White"]]:
        print("%s stones" % (full_name))
        for i in range(2, 6):
            open, semi_open = detect_rows(board, c, i);
            print("Open rows of length %d: %d" % (i, open))
            print("Semi-open rows of length %d: %d" % (i, semi_open))


def play_gomoku(board_size):
    board = make_empty_board(board_size)
    board_height = len(board)
    board_width = len(board[0])

    while True:
        print_board(board)
        if is_empty(board):
            move_y = board_height // 2
            move_x = board_width // 2
        else:
            move_y, move_x = search_max(board)

        print("Computer move: (%d, %d)" % (move_y, move_x))
        board[move_y][move_x] = "b"
        print_board(board)
        analysis(board)

        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return

        print("Your move:")
        move_y = int(input("y coord: "))
        move_x = int(input("x coord: "))
        board[move_y][move_x] = "w"
        print_board(board)
        analysis(board)

        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            print(game_res)
            return
def play_gomoku(board_size):
    board = make_empty_board(board_size)
    board_height = len(board)
    board_width = len(board[0])

    while True:
        print_board(board)
        if is_empty(board):
            move_y = board_height // 2
            move_x = board_width // 2
        else:
            move_y, move_x = search_max(board)

        print("Computer move: (%d, %d)" % (move_y, move_x))
        board[move_y][move_x] = "b"
        print_board(board)
        analysis(board)

        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return game_res

        print("Your move:")
        move_y = int(input("y coord: "))
        move_x = int(input("x coord: "))
        board[move_y][move_x] = "w"
        print_board(board)
        analysis(board)

        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return game_res

def put_seq_on_board(board, y, x, d_y, d_x, length, col):
    '''Adds sequence of stones of length length to board starting at location (y,x) moving in direction d_Y,d_x'''
    for i in range(length):
        board[y][x] = col
        y += d_y
        x += d_x


def test_is_empty():
    board = make_empty_board(8)
    if is_empty(board):
        print("TEST CASE for is_empty PASSED")
    else:
        print("TEST CASE for is_empty FAILED")


def test_is_bounded():
    board = make_empty_board(8)
    x = 5;
    y = 1;
    d_x = 0;
    d_y = 1;
    length = 3
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)

    y_end = 3
    x_end = 5

    if is_bounded(board, y_end, x_end, length, d_y, d_x) == 'OPEN':
        print("TEST CASE for is_bounded PASSED")
    else:
        print("TEST CASE for is_bounded FAILED")


def test_detect_row():
    board = make_empty_board(8)
    x = 5; y = 1; d_x = 0; d_y = 1; length = 3
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    if detect_row(board, "w", 0,x,length,d_y,d_x) == (1,0):
        print("TEST CASE for detect_row PASSED")
    else:
        print("TEST CASE for detect_row FAILED")


def test_detect_rows():
    board = make_empty_board(8)
    x = 5; y = 1; d_x = 0; d_y = 1; length = 3; col = 'w'
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    if detect_rows(board, col,length) == (1,0):
        print("TEST CASE for detect_rows PASSED")
    else:
        print("TEST CASE for detect_rows FAILED")


def test_search_max():
    board = make_empty_board(8)
    x = 5; y = 0; d_x = 0; d_y = 1; length = 4; col = 'w'
    put_seq_on_board(board, y, x, d_y, d_x, length, col)
    x = 6; y = 0; d_x = 0; d_y = 1; length = 4; col = 'b'
    put_seq_on_board(board, y, x, d_y, d_x, length, col)
    print_board(board)
    if search_max(board) == (4,6):
        print("TEST CASE for search_max PASSED")
    else:
        print("TEST CASE for search_max FAILED")


def easy_testset_for_main_functions():
    test_is_empty()
    test_is_bounded()
    test_detect_row()
    test_detect_rows()
    test_search_max()
    testing_win_5_closed()

def testing_win_5_closed():
    board = make_empty_board(8)
    board[1][6] = "w"
    board[7][0] = "w"
    y = 6;
    x = 1;
    d_x = 1;
    d_y = -1;
    length = 5
    put_seq_on_board(board, y, x, d_y, d_x, length, "b")
    print_board(board)
    if is_win(board)=="Black won":
        print("TEST CASE for testing_win_5_closed PASSED")
    else:
        print("TEST CASE for testing_win_5_closed FAILED :(")

    # Expected output:
    #       *0|1|2|3|4|5|6|7*
    #       0 | | | | |w|b| *
    #       1 | | | | | | | *
    #       2 | |w| | | | | *
    #       3 | |b| | | | | *
    #       4 | |b| | | | | *
    #       5 | |b| | | | | *
    #       6 | |b| | | | | *
    #       7 | |b| | | | | *
    #       *****************
    #TEST CASE for testing_win_5_closed PASSED

def some_tests():
    board = make_empty_board(8)

    board[0][5] = "w"
    board[0][6] = "b"
    y = 5;
    x = 2;
    d_x = 0;
    d_y = 1;
    length = 3
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    analysis(board)

    # Expected output:
    #       *0|1|2|3|4|5|6|7*
    #       0 | | | | |w|b| *
    #       1 | | | | | | | *
    #       2 | | | | | | | *
    #       3 | | | | | | | *
    #       4 | | | | | | | *
    #       5 | |w| | | | | *
    #       6 | |w| | | | | *
    #       7 | |w| | | | | *
    #       *****************
    #       Black stones:
    #       Open rows of length 2: 0
    #       Semi-open rows of length 2: 0
    #       Open rows of length 3: 0
    #       Semi-open rows of length 3: 0
    #       Open rows of length 4: 0
    #       Semi-open rows of length 4: 0
    #       Open rows of length 5: 0
    #       Semi-open rows of length 5: 0
    #       White stones:
    #       Open rows of length 2: 0
    #       Semi-open rows of length 2: 0
    #       Open rows of length 3: 0
    #       Semi-open rows of length 3: 1
    #       Open rows of length 4: 0
    #       Semi-open rows of length 4: 0
    #       Open rows of length 5: 0
    #       Semi-open rows of length 5: 0

    y = 3;
    x = 5;
    d_x = -1;
    d_y = 1;
    length = 2

    put_seq_on_board(board, y, x, d_y, d_x, length, "b")
    print_board(board)
    analysis(board)

    # Expected output:
    #        *0|1|2|3|4|5|6|7*
    #        0 | | | | |w|b| *
    #        1 | | | | | | | *
    #        2 | | | | | | | *
    #        3 | | | | |b| | *
    #        4 | | | |b| | | *
    #        5 | |w| | | | | *
    #        6 | |w| | | | | *
    #        7 | |w| | | | | *
    #        *****************
    #
    #         Black stones:
    #         Open rows of length 2: 1
    #         Semi-open rows of length 2: 0
    #         Open rows of length 3: 0
    #         Semi-open rows of length 3: 0
    #         Open rows of length 4: 0
    #         Semi-open rows of length 4: 0
    #         Open rows of length 5: 0
    #         Semi-open rows of length 5: 0
    #         White stones:
    #         Open rows of length 2: 0
    #         Semi-open rows of length 2: 0
    #         Open rows of length 3: 0
    #         Semi-open rows of length 3: 1
    #         Open rows of length 4: 0
    #         Semi-open rows of length 4: 0
    #         Open rows of length 5: 0
    #         Semi-open rows of length 5: 0
    #

    y = 5;
    x = 3;
    d_x = -1;
    d_y = 1;
    length = 1
    put_seq_on_board(board, y, x, d_y, d_x, length, "b");
    print_board(board);
    analysis(board);

    #        Expected output:
    #           *0|1|2|3|4|5|6|7*
    #           0 | | | | |w|b| *
    #           1 | | | | | | | *
    #           2 | | | | | | | *
    #           3 | | | | |b| | *
    #           4 | | | |b| | | *
    #           5 | |w|b| | | | *
    #           6 | |w| | | | | *
    #           7 | |w| | | | | *
    #           *****************
    #
    #
    #        Black stones:
    #        Open rows of length 2: 0
    #        Semi-open rows of length 2: 0
    #        Open rows of length 3: 0
    #        Semi-open rows of length 3: 1
    #        Open rows of length 4: 0
    #        Semi-open rows of length 4: 0
    #        Open rows of length 5: 0
    #        Semi-open rows of length 5: 0
    #        White stones:
    #        Open rows of length 2: 0
    #        Semi-open rows of length 2: 0
    #        Open rows of length 3: 0
    #        Semi-open rows of length 3: 1
    #        Open rows of length 4: 0
    #        Semi-open rows of length 4: 0
    #        Open rows of length 5: 0
    #        Semi-open rows of length 5: 0
def is_bounded_test_corner():
    board = make_empty_board(8)
    board[0][0] = "w"
    board[0][7] = "w"
    board[7][0] = "w"
    board[7][7] = "w"
    print_board(board)

    a,mini_test_count=0,0
    #checking (0,0)
    y,x=0,0
    if is_bounded(board,y,x,1,0,1)=="SEMIOPEN" and is_bounded(board,y,x,1,1,0)=="SEMIOPEN" and is_bounded(board,y,x,1,1,-1)=="CLOSED" and is_bounded(board,y,x,1,1,1)=="SEMIOPEN":
        mini_test_count+=4

    #checking (7,0)
    x,y=7,0
    if is_bounded(board,y,x,1,0,1)=="SEMIOPEN" and is_bounded(board,y,x,1,1,0)=="SEMIOPEN" and is_bounded(board,y,x,1,1,-1)=="SEMIOPEN" and is_bounded(board,y,x,1,1,1)=="CLOSED":
        mini_test_count+=4

    #checking (0,7)
    x,y=0,7
    if is_bounded(board,y,x,1,0,1)=="SEMIOPEN" and is_bounded(board,y,x,1,1,0)=="SEMIOPEN" and is_bounded(board,y,x,1,1,-1)=="SEMIOPEN" and is_bounded(board,y,x,1,1,1)=="CLOSED":
        mini_test_count+=4

    #checking (7,7)
    x,y=7,7
    if is_bounded(board,y,x,1,0,1)=="SEMIOPEN" and is_bounded(board,y,x,1,1,0)=="SEMIOPEN" and is_bounded(board,y,x,1,1,-1)=="CLOSED" and is_bounded(board,y,x,1,1,1)=="SEMIOPEN":
        mini_test_count+=4

    if mini_test_count == 16:
        print("TEST CASE for is_bounded PASSED!!!!")
    else:
        print("TEST CASE for is_bounded FAILED, passing", mini_test_count,"/16",":(")
def draw_test_C():
    board = make_empty_board(8)
    for i in range(len(board)):
        put_seq_on_board(board, i, 0, 0, 1, 8, "a")
    print_board(board)
    if is_win(board)=="Draw":
        print("PASSSS CAMERON PROUD, board full of a's and your grades will be a's too")
    else:
        print("FAILED CAMERON >:(, board full of a's yet your grades will b f's")
if __name__ == '__main__':
    easy_testset_for_main_functions() #passed
    #is_bounded_test_corner()
    #play_gomoku(8)
    #testing_win_5_closed()
    #draw_test_C()
